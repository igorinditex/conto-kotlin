<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ximedes.conto.db.TransferMapper">

    <resultMap id="transferMap" type="com.ximedes.conto.domain.Transfer">
        <constructor>
            <idArg column="transfer_id" javaType="_long"/>
            <arg column="debit_account_id" javaType="string"/>
            <arg column="credit_account_id" javaType="string"/>
            <arg column="amount" javaType="_long"/>
            <arg column="description" javaType="string"/>
        </constructor>
    </resultMap>

    <insert id="insertTransfer" useGeneratedKeys="true" keyProperty="transferID">
        INSERT INTO transfer
        (debit_account_id, credit_account_id, amount, description)
        VALUES
        (#{debitAccountID}, #{creditAccountID}, #{amount}, #{description})
    </insert>

    <select id="findByTransferID" resultMap="transferMap">
        SELECT *
        FROM transfer
        WHERE transfer_id = #{transferID}
    </select>

    <select id="findTransfersByAccountID" resultMap="transferMap">
        SELECT *
        FROM transfer t
        WHERE t.debit_account_id = #{id}
        OR
        t.credit_account_id = #{id}
    </select>

    <select id="calculateBalanceByAccountID" resultType="Long">
        WITH DebitAccount AS
        (
           SELECT
              ISNULL( (
              SELECT
                 SUM(AMOUNT) as DA_AMOUNT
              FROM
                 TRANSFER
              WHERE
                 DEBIT_ACCOUNT_ID = #{id}
              GROUP BY
                 DEBIT_ACCOUNT_ID), 0) AS DA_AMOUNT
        ),
        CreditAccount AS
        (
           SELECT
              ISNULL( (
              SELECT
                 SUM(AMOUNT) as CA_AMOUNT
              FROM
                 TRANSFER
              WHERE
                 CREDIT_ACCOUNT_ID = #{id}
              GROUP BY
                 CREDIT_ACCOUNT_ID), 0) AS CA_AMOUNT
        ),
        AccountBalance AS
        (
           SELECT
            ca.CA_AMOUNT - da.DA_AMOUNT AS AMOUNT
           FROM
              DebitAccount da,
              CreditAccount ca
        )
        SELECT
           *
        FROM
           AccountBalance;
    </select>

</mapper>